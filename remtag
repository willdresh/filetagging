#!/usr/bin/env python

import os
import sys

dbqFilename='filetagging_db_queries.py'
exec(compile(open(dbqFilename).read(),dbqFilename,'exec')) #this is a "#include" directive

rt_auxFilename='aux_remtag.py'
exec(compile(open(rt_auxFilename).read(),rt_auxFilename,'exec')) #this is a "#include" directive

###########################################
### BEGIN COMMAND LINE INPUT VALIDATION ###
###          (and assignment)           ###
###########################################

verbose=False

# If user asked for help, print help text and exit successfully
if sys.argv[1] in ['--help','-h']:
    printRemTagHelpText();
    exit(0);
# Check if verbose switch was specified
elif sys.argv[1] in ['--verbose','-v']:
    verbose=True
    del sys.argv[1] #Delete the -v switch from the argument list, so the rest of the args line up

# At least 2 arguments required (not counting "-v" if it was specified)
if len(sys.argv) < 2:
    printRemTagHelpText();
    handleInvalidArguments("too few arguments");


#target=getStandardizedFile(sys.argv[1]);
#target_dir=getStandardizedDirectory(target);

rm_fileName=getStandardizedFile(sys.argv[1])
targetFid=getFileID(rm_fileName)
if (targetFid==None):
    printFileNotInDBMessage(rm_fileName);
taglist=sys.argv[2:len(sys.argv)];
tagsToRemove=set()
for tagName in taglist:
    tagID=getTagID(tagName);
    if tagID != None:
        tagsToRemove.add(tagID);
    else:
        printTagNotInDBMessage(tagName);


###########################################
###  END COMMAND LINE INPUT VALIDATION  ###
###          (and assignment)           ###
###########################################

if (targetFid != None and len(tagsToRemove) >= 1):
    removeTags(targetFid,tagsToRemove)
else:
    printNothingToDoMessage("remtag:");
